heat_template_version: 2013-05-23

description: >
  This is a single compute and router for HOT.

parameters:
  key_name:
    type: string
    label: key_name
    description: Name of key-pair to be used for compute instance
    default: jdizzle
  image_id:
    type: string
    label: image_id
    description: Name of the image to use for compute instance
    default: ubuntu-trusty
  instance_type:
    type: string
    label: instance_type
    description: Type of instance (flavor) to be used
    default: m1.medium
    constraints:
      - allowed_values: [ m1.medium, m1.large, m1.xlarge ]
        description: Value must be m1.medium, m1.large, or m1.xlarge
  public_net:
    type: string
    description: public network id
  secgroup_id:
    type: string
    description : Id of the security groupe


resources:
  private_net:
        type: OS::Neutron::Net
        properties:
          name: private-net

  private_subnet:
        type: OS::Neutron::Subnet
        properties:
          network_id: { get_resource: private_net }
          cidr: 172.16.2.0/24
          gateway_ip: 172.16.2.1

  instance_router:
        type: OS::Neutron::Router
        properties:
          external_gateway_info:
            network: { get_param: public_net }

  instance_interface:
        type: OS::Neutron::RouterInterface
        properties:
          router_id: { get_resource: instance }
          subnet_id: { get_resource: private_subnet }

  server_port:
        type: OS::Neutron::Port
        properties:
          network_id: { get_resource: private_net }
          security_groups: [ get_param: secgroup_id ]
          fixed_ips:
            - subnet_id: { get_resource: private_subnet }

  server_floating_ip:
        type: OS::Neutron::FloatingIP
        properties:
          floating_network_id: { get_param: public_net }
          port_id: { get_resource: server_port }

  server:
        type: OS::Nova::Server
        properties:
          name: server
          image: { get_param: image_id }
          flavor: m1.medium
          networks:
                - port: { get_resource: server_port }

outputs:
  server_private_ip:
    description: Private IP address of server
    value: { get_attr: [ server, first_address ] }
  server_public_ip:
    description: Floating IP address of server
    value: { get_attr: [ server_floating_ip, floating_ip_address ] }
